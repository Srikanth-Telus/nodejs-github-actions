name: Node.js CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Run build
        run: npm run build

      - name: Run tests
        run: npm test

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v2
        with:
          args: -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


Build-image-publish-to-ecr:
    needs: SonarCloud Scan
    runs-on: ubuntu-latest
    name: Build Image Publish to ECR
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1  # Updated to use a more recent version

      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: nodejs-github-action
          IMAGE_TAG: v1
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
             

      - name: Login to GitHub Packages
        uses: docker/login-action@v1  # Updated to use Docker's official login-action
        with:
          registry: docker.pkg.github.com
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

  Image-Scan-with-ECR:
    needs: Build-image-publish-to-ecr
    runs-on: ubuntu-latest
    name: Image Scan with ECR
    steps:
      - name: Scan Docker image with ECR Scan
        uses: alexjurkiewicz/ecr-scan-image@v1.7.1
        continue-on-error: true
        with:
          aws-region: us-east-1
          repository: $REGISTRY/$REPOSITORY
          tag: v1
      - run: echo "${{ steps.docker-scan.outputs.total }} total vulnerabilities."

  Image-Deploy-to-EKS:
    needs: Image-Scan-with-ECR
    runs-on: ubuntu-latest
    name: Image Deploy to EKS
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.27.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        #env:
          #KUBECONFIG: ${{secrets.KUBE_CONFIG}}  

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name my-demo-nodejs --region us-east-1
   
      - name: Verify kubectl configuration
        run: kubectl config view          
 
      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml